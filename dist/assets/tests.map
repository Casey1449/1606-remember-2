{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","remember/tests/acceptance/reminder-list-test.js","remember/tests/acceptance/reminder-list-test.jshint.js","remember/tests/acceptance/reminder-list/edit-test.js","remember/tests/acceptance/reminder-list/edit-test.jshint.js","remember/tests/acceptance/reminder-list/new-test.js","remember/tests/acceptance/reminder-list/new-test.jshint.js","remember/tests/app.jshint.js","remember/tests/components/delete-button.jshint.js","remember/tests/controllers/reminder-list.jshint.js","remember/tests/controllers/reminder-list/edit.jshint.js","remember/tests/controllers/reminder-list/new.jshint.js","remember/tests/helpers/destroy-app.js","remember/tests/helpers/destroy-app.jshint.js","remember/tests/helpers/module-for-acceptance.js","remember/tests/helpers/module-for-acceptance.jshint.js","remember/tests/helpers/resolver.js","remember/tests/helpers/resolver.jshint.js","remember/tests/helpers/start-app.js","remember/tests/helpers/start-app.jshint.js","remember/tests/integration/components/delete-button-test.js","remember/tests/integration/components/delete-button-test.jshint.js","remember/tests/integration/components/reminder-detail-test.js","remember/tests/integration/components/reminder-detail-test.jshint.js","remember/tests/integration/components/reminder-item-test.js","remember/tests/integration/components/reminder-item-test.jshint.js","remember/tests/models/reminder.jshint.js","remember/tests/resolver.jshint.js","remember/tests/router.jshint.js","remember/tests/routes/reminder-list.jshint.js","remember/tests/routes/reminder-list/edit.jshint.js","remember/tests/routes/reminder-list/reminder-detail.jshint.js","remember/tests/test-helper.js","remember/tests/test-helper.jshint.js","remember/tests/transforms/date.jshint.js","remember/tests/unit/controllers/new-test.js","remember/tests/unit/controllers/new-test.jshint.js","remember/tests/unit/controllers/reminder-detail-test.js","remember/tests/unit/controllers/reminder-detail-test.jshint.js","remember/tests/unit/controllers/reminder-list-test.js","remember/tests/unit/controllers/reminder-list-test.jshint.js","remember/tests/unit/models/reminder-list-test.js","remember/tests/unit/models/reminder-list-test.jshint.js","remember/tests/unit/models/reminder-test.js","remember/tests/unit/models/reminder-test.jshint.js","remember/tests/unit/routes/reminder-list-test.js","remember/tests/unit/routes/reminder-list-test.jshint.js","remember/tests/unit/routes/reminder-list/edit.js","remember/tests/unit/routes/reminder-list/edit.jshint.js","remember/tests/unit/routes/reminder-list/new-test.js","remember/tests/unit/routes/reminder-list/new-test.jshint.js","remember/tests/unit/routes/reminder-list/reminder-detail-test.js","remember/tests/unit/routes/reminder-list/reminder-detail-test.jshint.js","remember/tests/unit/transforms/date-test.js","remember/tests/unit/transforms/date-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('remember/tests/acceptance/reminder-list-test', ['exports', 'qunit', 'remember/tests/helpers/module-for-acceptance', 'ember'], function (exports, _qunit, _rememberTestsHelpersModuleForAcceptance, _ember) {\n\n  (0, _rememberTestsHelpersModuleForAcceptance['default'])('Acceptance | reminders list', {\n    beforeEach: function beforeEach() {\n      server.createList('reminder', 5);\n    },\n    afterEach: function afterEach() {\n      server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('viewing the homepage', function (assert) {\n\n    visit('/');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/');\n      assert.equal(_ember['default'].$('.spec-reminder-item').length, 5);\n    });\n  });\n\n  (0, _qunit.test)('clicking on an individual item', function (assert) {\n\n    visit('/');\n    click('.spec-reminder-item:first');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/1');\n      assert.equal(_ember['default'].$('.spec-reminder-item:first').text().trim(), _ember['default'].$('.spec-reminder-title').text().trim());\n    });\n  });\n\n  (0, _qunit.test)('clicking on the âž• button displays the form', function (assert) {\n\n    visit('/');\n    click('.add-reminder-button');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/new');\n      assert.equal(_ember['default'].$('.create-reminder-form').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('clicking on the edit button takes you to the :id/edit url', function (assert) {\n\n    visit('/');\n    click('.reminder-list-item:last');\n    click('.edit-button');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/5/edit');\n      assert.equal(_ember['default'].$('.create-reminder-form').length, 1);\n      assert.equal(_ember['default'].$('.reminder-revert-button').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('editing fields should show the revert button when changes are unsaved', function (assert) {\n\n    visit('/');\n    click('.reminder-list-item:last');\n\n    andThen(function () {\n      assert.equal(_ember['default'].$('.reminder-revert-button').length, 0);\n    });\n\n    click('.edit-button');\n    fillIn('.reminder-title-input', 'New');\n\n    andThen(function () {\n      assert.equal(_ember['default'].$('.reminder-revert-button').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('editing should trigger warning icon when changes are unsaved', function (assert) {\n\n    visit('/');\n    click('.reminder-list-item:nth-child(5)');\n    click('.edit-button');\n    fillIn('.reminder-title-input', 'New');\n\n    andThen(function () {\n      click('.reminder-list-item:nth-child(5)');\n    });\n\n    andThen(function () {\n      assert.equal(_ember['default'].$('.dirty-warning-icon:visible').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('has a search field', function (assert) {\n\n    visit('/');\n\n    andThen(function () {\n      assert.equal(_ember['default'].$('.reminder-list-filter').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('search field finds case insensitive matches in the reminder-list titles', function (assert) {\n    visit('/');\n\n    click('.reminder-list-item:nth-child(5)');\n    click('.edit-button');\n    fillIn('.reminder-title-input', 'New1111111111111');\n    click('.reminder-submit-button');\n\n    andThen(function () {\n      click('.reminder-list-item:nth-child(2)');\n      click('.edit-button');\n      fillIn('.reminder-title-input', 'neW1111111111111ton');\n      click('.reminder-submit-button');\n    });\n\n    andThen(function () {\n      click('.reminder-list-filter');\n      fillIn('.reminder-list-filter', \"new\");\n    });\n\n    andThen(function () {\n      assert.equal(_ember['default'].$('.reminder-list-item').length, 2);\n    });\n  });\n\n  (0, _qunit.test)('clicking the delete button component', function (assert) {\n\n    visit('/');\n    click('.delete-button:last');\n\n    andThen(function () {\n      assert.equal(_ember['default'].$('.reminder-list-item').length, 4);\n    });\n  });\n});\n/* globals server */","define('remember/tests/acceptance/reminder-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/reminder-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'acceptance/reminder-list-test.js should pass jshint.\\nacceptance/reminder-list-test.js: line 3, col 16, \\'skip\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('remember/tests/acceptance/reminder-list/edit-test', ['exports', 'qunit', 'remember/tests/helpers/module-for-acceptance'], function (exports, _qunit, _rememberTestsHelpersModuleForAcceptance) {\n\n  (0, _rememberTestsHelpersModuleForAcceptance['default'])('Acceptance | reminder list/edit', {\n    beforeEach: function beforeEach() {\n      server.createList('reminder', 5);\n    },\n    afterEach: function afterEach() {\n      server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('visiting the \"edit\" route', function (assert) {\n    visit('5/edit');\n\n    andThen(function () {\n      assert.equal(currentURL(), '5/edit');\n    });\n  });\n\n  (0, _qunit.test)('editing a reminder', function (assert) {\n\n    visit('5/edit');\n    fillIn('.reminder-title-input', 'Some title');\n    fillIn('.reminder-notes-input', 'Some notes');\n    click('.reminder-submit-button');\n\n    andThen(function () {\n      assert.equal(Ember.$('.spec-reminder-title').text(), 'Some title');\n      assert.equal(Ember.$('.reminder-detail-notes').text(), 'Some notes');\n    });\n  });\n\n  (0, _qunit.test)('revert a reminder', function (assert) {\n\n    visit('5/edit');\n    fillIn('.reminder-title-input', 'Hey');\n    fillIn('.reminder-notes-input', 'How are you?');\n    click('.reminder-submit-button');\n\n    andThen(function () {\n      assert.equal(Ember.$('.spec-reminder-title').text(), 'Hey');\n      assert.equal(Ember.$('.reminder-detail-notes').text(), 'How are you?');\n    });\n\n    andThen(function () {\n      click('.edit-button');\n      fillIn('.reminder-title-input', 'Some title');\n      fillIn('.reminder-notes-input', 'Some notes');\n      click('.reminder-revert-button');\n      visit('5');\n    });\n\n    andThen(function () {\n      assert.equal(Ember.$('.spec-reminder-title').text(), 'Hey');\n      assert.equal(Ember.$('.reminder-detail-notes').text(), 'How are you?');\n    });\n  });\n});","define('remember/tests/acceptance/reminder-list/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/reminder-list/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'acceptance/reminder-list/edit-test.js should pass jshint.\\nacceptance/reminder-list/edit-test.js: line 6, col 5, \\'server\\' is not defined.\\nacceptance/reminder-list/edit-test.js: line 9, col 5, \\'server\\' is not defined.\\nacceptance/reminder-list/edit-test.js: line 29, col 18, \\'Ember\\' is not defined.\\nacceptance/reminder-list/edit-test.js: line 30, col 18, \\'Ember\\' is not defined.\\nacceptance/reminder-list/edit-test.js: line 42, col 18, \\'Ember\\' is not defined.\\nacceptance/reminder-list/edit-test.js: line 43, col 18, \\'Ember\\' is not defined.\\nacceptance/reminder-list/edit-test.js: line 55, col 18, \\'Ember\\' is not defined.\\nacceptance/reminder-list/edit-test.js: line 56, col 18, \\'Ember\\' is not defined.\\n\\n8 errors');\n  });\n});","define('remember/tests/acceptance/reminder-list/new-test', ['exports', 'qunit', 'remember/tests/helpers/module-for-acceptance'], function (exports, _qunit, _rememberTestsHelpersModuleForAcceptance) {\n\n  (0, _rememberTestsHelpersModuleForAcceptance['default'])('Acceptance | reminder list/new', {\n    beforeEach: function beforeEach() {\n      server.createList('reminder', 5);\n    },\n    afterEach: function afterEach() {\n      server.shutdown();\n    }\n  });\n\n  (0, _qunit.test)('visiting the \"new\" route', function (assert) {\n    visit('/new');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/new');\n    });\n  });\n\n  (0, _qunit.test)('submitting a new reminder', function (assert) {\n\n    visit('/new');\n    fillIn('.reminder-title-input', 'Some title');\n    fillIn('.reminder-notes-input', 'Some notes');\n    click('.reminder-submit-button');\n\n    andThen(function () {\n      assert.equal(Ember.$('.spec-reminder-item').length, 6);\n      assert.equal(Ember.$('.spec-reminder-item:last').text(), 'Some title');\n    });\n  });\n});","define('remember/tests/acceptance/reminder-list/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/reminder-list/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'acceptance/reminder-list/new-test.js should pass jshint.\\nacceptance/reminder-list/new-test.js: line 6, col 5, \\'server\\' is not defined.\\nacceptance/reminder-list/new-test.js: line 9, col 5, \\'server\\' is not defined.\\nacceptance/reminder-list/new-test.js: line 29, col 18, \\'Ember\\' is not defined.\\nacceptance/reminder-list/new-test.js: line 30, col 18, \\'Ember\\' is not defined.\\n\\n4 errors');\n  });\n});","define('remember/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('remember/tests/components/delete-button.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/delete-button.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-button.js should pass jshint.');\n  });\n});","define('remember/tests/controllers/reminder-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/reminder-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/reminder-list.js should pass jshint.');\n  });\n});","define('remember/tests/controllers/reminder-list/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/reminder-list/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/reminder-list/edit.js should pass jshint.');\n  });\n});","define('remember/tests/controllers/reminder-list/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/reminder-list/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/reminder-list/new.js should pass jshint.\\ncontrollers/reminder-list/new.js: line 11, col 39, Missing semicolon.\\n\\n1 error');\n  });\n});","define('remember/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('remember/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('remember/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'remember/tests/helpers/start-app', 'remember/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _rememberTestsHelpersStartApp, _rememberTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _rememberTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _rememberTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('remember/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('remember/tests/helpers/resolver', ['exports', 'remember/resolver', 'remember/config/environment'], function (exports, _rememberResolver, _rememberConfigEnvironment) {\n\n  var resolver = _rememberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _rememberConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _rememberConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('remember/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('remember/tests/helpers/start-app', ['exports', 'ember', 'remember/app', 'remember/config/environment'], function (exports, _ember, _rememberApp, _rememberConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _rememberConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _rememberApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('remember/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('remember/tests/integration/components/delete-button-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('delete-button', 'Integration | Component | delete button', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 17\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'delete-button', ['loc', [null, [1, 0], [1, 17]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'delete-button', [], [], 0, null, ['loc', [null, [2, 4], [4, 22]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('remember/tests/integration/components/delete-button-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/delete-button-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-button-test.js should pass jshint.');\n  });\n});","define('remember/tests/integration/components/reminder-detail-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('reminder-detail', 'Integration | Component | reminder detail', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'reminder-detail', ['loc', [null, [1, 0], [1, 19]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'reminder-detail', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('remember/tests/integration/components/reminder-detail-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/reminder-detail-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/reminder-detail-test.js should pass jshint.');\n  });\n});","define('remember/tests/integration/components/reminder-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('reminder-item', 'Integration | Component | reminder item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 17\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'reminder-item', ['loc', [null, [1, 0], [1, 17]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'reminder-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 22]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('remember/tests/integration/components/reminder-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/reminder-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/reminder-item-test.js should pass jshint.');\n  });\n});","define('remember/tests/models/reminder.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/reminder.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/reminder.js should pass jshint.');\n  });\n});","define('remember/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('remember/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('remember/tests/routes/reminder-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/reminder-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/reminder-list.js should pass jshint.');\n  });\n});","define('remember/tests/routes/reminder-list/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/reminder-list/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/reminder-list/edit.js should pass jshint.');\n  });\n});","define('remember/tests/routes/reminder-list/reminder-detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/reminder-list/reminder-detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/reminder-list/reminder-detail.js should pass jshint.');\n  });\n});","define('remember/tests/test-helper', ['exports', 'remember/tests/helpers/resolver', 'ember-qunit'], function (exports, _rememberTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_rememberTestsHelpersResolver['default']);\n});","define('remember/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('remember/tests/transforms/date.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/date.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/date.js should pass jshint.');\n  });\n});","define('remember/tests/unit/controllers/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:new', 'Unit | Controller | new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('remember/tests/unit/controllers/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/new-test.js should pass jshint.');\n  });\n});","define('remember/tests/unit/controllers/reminder-detail-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:reminder-detail', 'Unit | Controller | reminder detail', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('remember/tests/unit/controllers/reminder-detail-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/reminder-detail-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/reminder-detail-test.js should pass jshint.');\n  });\n});","define('remember/tests/unit/controllers/reminder-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:reminder-list', 'Unit | Controller | reminder list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('remember/tests/unit/controllers/reminder-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/reminder-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/reminder-list-test.js should pass jshint.');\n  });\n});","define('remember/tests/unit/models/reminder-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('reminder-list', 'Unit | Model | reminder list', {\n    // Specify the other units that are required for this test.\n    needs: ['model:reminder']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('remember/tests/unit/models/reminder-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/reminder-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/reminder-list-test.js should pass jshint.');\n  });\n});","define('remember/tests/unit/models/reminder-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('reminder', 'Unit | Model | reminder', {\n    // Specify the other units that are required for this test.\n    needs: ['model:reminder-list']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('remember/tests/unit/models/reminder-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/reminder-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/reminder-test.js should pass jshint.');\n  });\n});","define('remember/tests/unit/routes/reminder-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:reminder-list', 'Unit | Route | reminder list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('remember/tests/unit/routes/reminder-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/reminder-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/reminder-list-test.js should pass jshint.');\n  });\n});","define('remember/tests/unit/routes/reminder-list/edit', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:reminder-detail/edit', 'Unit | Route | reminder detail/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('remember/tests/unit/routes/reminder-list/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/reminder-list/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/reminder-list/edit.js should pass jshint.');\n  });\n});","define('remember/tests/unit/routes/reminder-list/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:reminder-list/new', 'Unit | Route | reminder list/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('remember/tests/unit/routes/reminder-list/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/reminder-list/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/reminder-list/new-test.js should pass jshint.');\n  });\n});","define('remember/tests/unit/routes/reminder-list/reminder-detail-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:reminder-list/reminder-detail', 'Unit | Route | reminder list/reminder detail', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('remember/tests/unit/routes/reminder-list/reminder-detail-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/reminder-list/reminder-detail-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/reminder-list/reminder-detail-test.js should pass jshint.');\n  });\n});","define('remember/tests/unit/transforms/date-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:date', 'Unit | Transform | date', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('remember/tests/unit/transforms/date-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/date-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/date-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('remember/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingspIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjjjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}